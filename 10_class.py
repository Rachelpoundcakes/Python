# -*- coding: utf-8 -*-
"""10.Class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hm3jKAyOyv0ZH9VvOfPOhvpWbMaqa_79
"""

class MyClass:
    pass

MyClass

type(MyClass)

#설계 도면을 만드는 것
class Person:
    Name = 'Default Name'                            #--->property(속성)
    
    def Print(self):
        print('My name is {0}'.format(self.Name))     #--->동작

son = Person()

son.Name = '손흥민'
son.Print()

p1 = Person()
p2 = Person()

p1.Name = '송중기'
p2.Name = '박보영'

p1.Print()
p2.Print()

# instance

Person.title = 'New title'

p1.title

p1.age = 20

p1.age

# 클래스의 상속

class Person:
    pass

class Bird:
    pass

class Student(Person):    # Student는 Person에서부터 상속받았다
    pass

p = Person()    # p는 Person에서 만든 인스턴스
s = Student()    # s는 Student에서 만든 인스턴스

isinstance(p, Person)

isinstance(s, Person)

isinstance(s, object)

isinstance(p, Bird)

# 생성자, 소멸자

class MyClass:
    # 생성자 #value는 변수이름. 다른 걸로 해도 됨
    def __init__(self, value):
        self.Value = value
        print('Class is created! Value = ', value)
        
    # 소멸자
    def __del__(self):
        print('Class is deleted')

m = MyClass(10)

del m

# 정적 메소드

class CounterManager:
    insCount= 0
    
    def __init__(self):
        CounterManager.insCount += 1
    
    def printInstanceCount():
        print('Instance Count:', CounterManager.insCount)

# a = CounterManager()
# b = CounterManager()
# c = CounterManager()

a, b, c = CounterManager(), CounterManager(), CounterManager()

CounterManager.printInstanceCount()

# 상속의 확장

class Person:
    def __init__(self, name, phone):
        self.Name = name
        self.Phone = phone
        
    def PrintInfo(self):
        print('Info(Name: {0}, Phone: {1})'.format(self.Name, self.Phone))
    
    def PrintPersonData(self):
        print('Person(Name: {0}, Phone: {1})'.format(self.Name, self.Phone))

class Student(Person):
    
    def __init__(self, name, phone, subject, studentID):
        self.Name = name
        self.Phone = phone
        self.Subject = subject
        self.Student = studentID

p = Person('IU', '010-0000-0000')
s = Student('MinA', '010-111-1111', 'Computer Science', '00000')

p.__dict__  # 속성 확인

s.__dict__

p.PrintInfo()

s.PrintInfo()

# 상속 관계의 확인
issubclass(Student, Person)

issubclass(Person, Student)

# 다중 상속
class Tiger:
    def Jump(self):
        print('Tiger Jump!!')

class Lion:
    def Bite(self):
        print('Lion bite')

class Liger(Tiger, Lion):            # 타이거와 리이거로부터 상속받음
    def Play(self):
        print('Liger player')

l = Liger()

l.Play()

l.Jump()

l.Bite()

